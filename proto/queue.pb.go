//
//Copyright 2024 Derrick J Wippler
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: proto/queue.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueueProduceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue this item is to be queued to.
	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	// How long the client should wait until the items in this produce request are accepted into the queue.
	// If this duration elapses and the server hasn't responded the client should assume the item was not
	// produced. If the server detects a client has been waiting for to long, it will cancel the produce
	// request and return an error to the client.
	//
	// Example: '1m', '20s'. Default timeout is '1m' and the maximum timeout is 15 minutes.
	RequestTimeout string `protobuf:"bytes,2,opt,name=requestTimeout,json=request_timeout,proto3" json:"requestTimeout,omitempty"` // TODO: OpenAPI
	// A list of items to be queued
	Items []*QueueProduceItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *QueueProduceRequest) Reset() {
	*x = QueueProduceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueProduceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueProduceRequest) ProtoMessage() {}

func (x *QueueProduceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueProduceRequest.ProtoReflect.Descriptor instead.
func (*QueueProduceRequest) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{0}
}

func (x *QueueProduceRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueProduceRequest) GetRequestTimeout() string {
	if x != nil {
		return x.RequestTimeout
	}
	return ""
}

func (x *QueueProduceRequest) GetItems() []*QueueProduceItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueueProduceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A user specified field which indicates the encoding used to encode the 'payload'
	Encoding string `protobuf:"bytes,1,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// A Kind or Type the payload contains. Consumers can use this field to determine handling
	// of the payload prior to unmarshalling. Examples: 'webhook-v2', 'webhook-v1',
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// This is a user specified field that can be used by the consumer to determine handling
	// of the message without needing to unmarshall the payload.
	// Examples: 'account-0001', 'john.smith'
	Reference string `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
	// The payload of the item as an array of raw bytes with no predetermined character set.
	// Clients who communicate with Querator with `Content-Type: application/protobuf`
	// (which is the default for golang clients) should use this field instead of `strings`.
	//
	// NOTE: If `Content-Type: application/json` is used when communicating with Querator, the
	// 'bytes' field will be encoded as base64. This is because byte fields (unlike string fields)
	// can contain non-UTF8 binary data, and since that cannot be directly represented in JSON, we
	// have to base64 encode it.
	Bytes []byte `protobuf:"bytes,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// This is an a convenience field useful for clients that are communicating with Querator via
	// `Content-Type: application/json`. This field assumes a utf8 encoded payload and does not
	// require the payload to be encoded as base64. As such is is an excellent choice for clients
	// who do not have access to a base64 encoder and can't use the `bytes` field for their payload.
	//
	// NOTE: Both `bytes` and `utf8` can be set, but `bytes` takes precedence. If `bytes` is set,
	// then that will be used as the payload. If `utf8` is set and `bytes` is empty, then `utf8`
	// will be used. If both `bytes` and `utf8` are set, then `bytes` will be used and `utf8` will
	// be dropped.
	// Example: 'Hello, I am a UTF-8 payload' , '{"key", "value"}'
	Utf8 string `protobuf:"bytes,5,opt,name=utf8,proto3" json:"utf8,omitempty"`
}

func (x *QueueProduceItem) Reset() {
	*x = QueueProduceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueProduceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueProduceItem) ProtoMessage() {}

func (x *QueueProduceItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueProduceItem.ProtoReflect.Descriptor instead.
func (*QueueProduceItem) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{1}
}

func (x *QueueProduceItem) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *QueueProduceItem) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *QueueProduceItem) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *QueueProduceItem) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *QueueProduceItem) GetUtf8() string {
	if x != nil {
		return x.Utf8
	}
	return ""
}

type QueueReserveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue to reserve work from
	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	// The number of queue items requested from the queue.
	BatchSize int32 `protobuf:"varint,2,opt,name=batchSize,json=batch_size,proto3" json:"batchSize,omitempty"`
	// A user supplied unique string which identifies the client making this request. This
	// must be unique for each client reserving items. Multiple clients with the same
	// id cannot reserve from the same queue. If you need more throughput, increase the batch
	// size instead.
	ClientId string `protobuf:"bytes,3,opt,name=clientId,json=client_id,proto3" json:"clientId,omitempty"` // TODO: OpenAPI
	// The duration the client expects to wait for a queue item to be reserved before timing out.
	// Maximum timeout duration is 15 minutes
	// Example: '5m', '10s'
	RequestTimeout string `protobuf:"bytes,4,opt,name=requestTimeout,json=request_timeout,proto3" json:"requestTimeout,omitempty"` // TODO: OpenAPI
}

func (x *QueueReserveRequest) Reset() {
	*x = QueueReserveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueReserveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueReserveRequest) ProtoMessage() {}

func (x *QueueReserveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueReserveRequest.ProtoReflect.Descriptor instead.
func (*QueueReserveRequest) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{2}
}

func (x *QueueReserveRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueReserveRequest) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *QueueReserveRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *QueueReserveRequest) GetRequestTimeout() string {
	if x != nil {
		return x.RequestTimeout
	}
	return ""
}

type QueueReserveItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A user specified field which indicates the encoding the user used to encode the 'payload'
	Encoding string `protobuf:"bytes,1,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// A Kind or Type the payload contains. Consumers can use this field to determine handling
	// of the payload prior to unmarshalling. Examples: 'webhook-v2', 'webhook-v1',
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// This is a user specified field that can be used by the consumer to determine handling
	// of the queue item without needing to unmarshall the payload.
	// Examples: 'account-0001', 'john.smith', 'id-hIGTUYm2'
	Reference string `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
	// A unique id which identifies an item in a queue
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// The number of times this item has been deferred or reservation timed out during
	// processing by a consumer.
	Attempts int32 `protobuf:"varint,5,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// The date time that Querator will offer up this item to another consumer
	// If the consumer reserving this item has not marked it complete.
	//
	// The consumer can use this date to decide if it should finalize it's work
	// if the timeout date has expired.
	ReserveDeadline *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=reserveDeadline,json=reserve_deadline,proto3" json:"reserveDeadline,omitempty"` // TODO: OpenAPI
	// The payload of the item as an array of raw bytes with no predetermined character set.
	//
	// NOTE: If `Content-Type: application/json` is used when communicating with Querator, the
	// 'bytes' field will be encoded as base64. This is because byte fields (unlike string fields)
	// can contain non-UTF8 binary data, and since that cannot be directly represented in JSON, we
	// have to base64 encode it.
	Bytes []byte `protobuf:"bytes,7,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *QueueReserveItem) Reset() {
	*x = QueueReserveItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueReserveItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueReserveItem) ProtoMessage() {}

func (x *QueueReserveItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueReserveItem.ProtoReflect.Descriptor instead.
func (*QueueReserveItem) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{3}
}

func (x *QueueReserveItem) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *QueueReserveItem) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *QueueReserveItem) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *QueueReserveItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueueReserveItem) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *QueueReserveItem) GetReserveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ReserveDeadline
	}
	return nil
}

func (x *QueueReserveItem) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type QueueReserveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*QueueReserveItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *QueueReserveResponse) Reset() {
	*x = QueueReserveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueReserveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueReserveResponse) ProtoMessage() {}

func (x *QueueReserveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueReserveResponse.ProtoReflect.Descriptor instead.
func (*QueueReserveResponse) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{4}
}

func (x *QueueReserveResponse) GetItems() []*QueueReserveItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueueDeferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*QueueDeferItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *QueueDeferRequest) Reset() {
	*x = QueueDeferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueDeferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueDeferRequest) ProtoMessage() {}

func (x *QueueDeferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueDeferRequest.ProtoReflect.Descriptor instead.
func (*QueueDeferRequest) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{5}
}

func (x *QueueDeferRequest) GetItems() []*QueueDeferItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueueDeferItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique id which identifies a unique item in a queue.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The date after which the item will be added to the queue specified.
	// The date can be empty, the current time or a past date/time, in which
	// case the item will be immediately added to the queue.
	OfferAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=offerAt,json=offer_at,proto3" json:"offerAt,omitempty"` // TODO: OpenAPI
	// Indicates the item is dead, will not be retried regardless of the number of attempts
	// remaining. If set to true the defer will place the item in the dead letter queue for
	// the specified queue.
	Dead bool `protobuf:"varint,3,opt,name=dead,proto3" json:"dead,omitempty"`
}

func (x *QueueDeferItem) Reset() {
	*x = QueueDeferItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueDeferItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueDeferItem) ProtoMessage() {}

func (x *QueueDeferItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueDeferItem.ProtoReflect.Descriptor instead.
func (*QueueDeferItem) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{6}
}

func (x *QueueDeferItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueueDeferItem) GetOfferAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OfferAt
	}
	return nil
}

func (x *QueueDeferItem) GetDead() bool {
	if x != nil {
		return x.Dead
	}
	return false
}

type QueueCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	// The duration the client expects to wait for a queue item to be reserved before timing out.
	// Maximum timeout duration is 15 minutes
	// Example: '5m', '10s'
	RequestTimeout string `protobuf:"bytes,2,opt,name=requestTimeout,json=request_timeout,proto3" json:"requestTimeout,omitempty"` // TODO: OpenAPI
	// A list of ids to mark complete
	Ids []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *QueueCompleteRequest) Reset() {
	*x = QueueCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueCompleteRequest) ProtoMessage() {}

func (x *QueueCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueCompleteRequest.ProtoReflect.Descriptor instead.
func (*QueueCompleteRequest) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{7}
}

func (x *QueueCompleteRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueCompleteRequest) GetRequestTimeout() string {
	if x != nil {
		return x.RequestTimeout
	}
	return ""
}

func (x *QueueCompleteRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type QueueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue
	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	// The date the queue was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,json=created_at,proto3" json:"createdAt,omitempty"`
	// The date the queue was last updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,json=updated_at,proto3" json:"updatedAt,omitempty"`
	// The name of the dead letter queue for this queue. If this is a dead letter queue then
	// this field will be empty when retrieved via '/queue.list'
	DeadQueue string `protobuf:"bytes,4,opt,name=deadQueue,json=dead_queue,proto3" json:"deadQueue,omitempty"`
	// This is a user supplied field which could contain metadata or specify who owns this queue
	// Examples: "jake@statefarm.com", "stapler@office-space.com", "account-0001"
	Reference string `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`
	// The reservation timeout for this queue.
	// Example: '60m', '24h', '10s'
	ReserveTimeout string `protobuf:"bytes,6,opt,name=reserveTimeout,json=reserve_timeout,proto3" json:"reserveTimeout,omitempty"`
	// How long the item can wait in the queue regardless of attempts before it is moved
	// to the dead letter queue. Example: '24h', '60m', '10s'
	DeadTimeout string `protobuf:"bytes,7,opt,name=deadTimeout,json=dead_timeout,proto3" json:"deadTimeout,omitempty"`
	// The maximum number of times this message can be deferred by a consumer before it is
	// placed in the dead letter queue.
	MaxAttempts int32 `protobuf:"varint,8,opt,name=maxAttempts,json=max_attempts,proto3" json:"maxAttempts,omitempty"`
}

func (x *QueueInfo) Reset() {
	*x = QueueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueInfo) ProtoMessage() {}

func (x *QueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueInfo.ProtoReflect.Descriptor instead.
func (*QueueInfo) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{8}
}

func (x *QueueInfo) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *QueueInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *QueueInfo) GetDeadQueue() string {
	if x != nil {
		return x.DeadQueue
	}
	return ""
}

func (x *QueueInfo) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *QueueInfo) GetReserveTimeout() string {
	if x != nil {
		return x.ReserveTimeout
	}
	return ""
}

func (x *QueueInfo) GetDeadTimeout() string {
	if x != nil {
		return x.DeadTimeout
	}
	return ""
}

func (x *QueueInfo) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

type QueuePauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue
	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	// The duration of the pause, after which the queue will automatically resume
	PauseDuration string `protobuf:"bytes,2,opt,name=pauseDuration,json=pause_duration,proto3" json:"pauseDuration,omitempty"`
	// Indicate if the queue should be paused or un-paused. If true the queue will be paused for 'pause_duration'
	// or until another request is received with pause = false
	Pause bool `protobuf:"varint,3,opt,name=pause,proto3" json:"pause,omitempty"`
}

func (x *QueuePauseRequest) Reset() {
	*x = QueuePauseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuePauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePauseRequest) ProtoMessage() {}

func (x *QueuePauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePauseRequest.ProtoReflect.Descriptor instead.
func (*QueuePauseRequest) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{9}
}

func (x *QueuePauseRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueuePauseRequest) GetPauseDuration() string {
	if x != nil {
		return x.PauseDuration
	}
	return ""
}

func (x *QueuePauseRequest) GetPause() bool {
	if x != nil {
		return x.Pause
	}
	return false
}

type QueueClearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue
	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	// Defer indicates the 'defer' queue will be cleared. If true, any items
	// scheduled to be retried at a future date will be removed.
	Defer bool `protobuf:"varint,2,opt,name=defer,proto3" json:"defer,omitempty"` // TODO: Implement
	// Scheduled indicates any 'scheduled' items in the queue will be
	// cleared. If true, any items scheduled to be enqueued at a future date
	// will be removed.
	Scheduled bool `protobuf:"varint,3,opt,name=scheduled,proto3" json:"scheduled,omitempty"` // TODO: Implement
	// Queue indicates any items currently waiting in the FIFO queue will
	// clear. If true, any items in the queue which have NOT been reserved
	// will be removed.
	Queue bool `protobuf:"varint,4,opt,name=Queue,proto3" json:"Queue,omitempty"`
	// Destructive indicates the Defer,Scheduled,Queue operations should be
	// destructive in that all data regardless of status will be removed.
	// For example, if used with ClearRequest.Queue = true, then ALL items
	// in the queue regardless of reserve status will be removed. This means
	// that clients who currently have ownership of those items will not be able
	// to "complete" those items, as querator will have no knowledge of those items.
	Destructive bool `protobuf:"varint,5,opt,name=destructive,proto3" json:"destructive,omitempty"`
}

func (x *QueueClearRequest) Reset() {
	*x = QueueClearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueClearRequest) ProtoMessage() {}

func (x *QueueClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueClearRequest.ProtoReflect.Descriptor instead.
func (*QueueClearRequest) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{10}
}

func (x *QueueClearRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueClearRequest) GetDefer() bool {
	if x != nil {
		return x.Defer
	}
	return false
}

func (x *QueueClearRequest) GetScheduled() bool {
	if x != nil {
		return x.Scheduled
	}
	return false
}

func (x *QueueClearRequest) GetQueue() bool {
	if x != nil {
		return x.Queue
	}
	return false
}

func (x *QueueClearRequest) GetDestructive() bool {
	if x != nil {
		return x.Destructive
	}
	return false
}

type QueueStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
}

func (x *QueueStatsRequest) Reset() {
	*x = QueueStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueStatsRequest) ProtoMessage() {}

func (x *QueueStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueStatsRequest.ProtoReflect.Descriptor instead.
func (*QueueStatsRequest) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{11}
}

func (x *QueueStatsRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

type QueueStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the number of items in the queue
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// TotalReserved is the number of items in the queue that are in reserved state
	TotalReserved int32 `protobuf:"varint,2,opt,name=TotalReserved,json=total_reserved,proto3" json:"TotalReserved,omitempty"`
	// AverageAge is the average age of all items in the queue
	AverageAge string `protobuf:"bytes,3,opt,name=AverageAge,json=average_age,proto3" json:"AverageAge,omitempty"`
	// AverageReservedAge is the average age of reserved items in the queue
	AverageReservedAge string `protobuf:"bytes,4,opt,name=AverageReservedAge,json=average_reserved_age,proto3" json:"AverageReservedAge,omitempty"`
	// ProduceWaiting is the number of `/queue.produce` requests currently waiting
	// to be processed by the sync loop
	ProduceWaiting int32 `protobuf:"varint,5,opt,name=ProduceWaiting,json=produce_waiting,proto3" json:"ProduceWaiting,omitempty"`
	// ReserveWaiting is the number of `/queue.reserve` requests currently waiting
	// to be processed by the sync loop
	ReserveWaiting int32 `protobuf:"varint,6,opt,name=ReserveWaiting,json=reserve_waiting,proto3" json:"ReserveWaiting,omitempty"`
	// CompleteWaiting is the number of `/queue.complete` requests currently waiting
	// to be processed by the sync loop
	CompleteWaiting int32 `protobuf:"varint,7,opt,name=CompleteWaiting,json=complete_waiting,proto3" json:"CompleteWaiting,omitempty"`
	// ReserveBlocked is the number of reservations which are blocked waiting for new item to enter the queue.
	ReserveBlocked int32 `protobuf:"varint,8,opt,name=ReserveBlocked,json=reserve_blocked,proto3" json:"ReserveBlocked,omitempty"`
	// InFlight is the number of requests currently in flight
	InFlight int32 `protobuf:"varint,9,opt,name=InFlight,json=in_flight,proto3" json:"InFlight,omitempty"`
}

func (x *QueueStatsResponse) Reset() {
	*x = QueueStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueStatsResponse) ProtoMessage() {}

func (x *QueueStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueStatsResponse.ProtoReflect.Descriptor instead.
func (*QueueStatsResponse) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{12}
}

func (x *QueueStatsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueueStatsResponse) GetTotalReserved() int32 {
	if x != nil {
		return x.TotalReserved
	}
	return 0
}

func (x *QueueStatsResponse) GetAverageAge() string {
	if x != nil {
		return x.AverageAge
	}
	return ""
}

func (x *QueueStatsResponse) GetAverageReservedAge() string {
	if x != nil {
		return x.AverageReservedAge
	}
	return ""
}

func (x *QueueStatsResponse) GetProduceWaiting() int32 {
	if x != nil {
		return x.ProduceWaiting
	}
	return 0
}

func (x *QueueStatsResponse) GetReserveWaiting() int32 {
	if x != nil {
		return x.ReserveWaiting
	}
	return 0
}

func (x *QueueStatsResponse) GetCompleteWaiting() int32 {
	if x != nil {
		return x.CompleteWaiting
	}
	return 0
}

func (x *QueueStatsResponse) GetReserveBlocked() int32 {
	if x != nil {
		return x.ReserveBlocked
	}
	return 0
}

func (x *QueueStatsResponse) GetInFlight() int32 {
	if x != nil {
		return x.InFlight
	}
	return 0
}

var File_proto_queue_proto protoreflect.FileDescriptor

var file_proto_queue_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x71, 0x75, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f,
	0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x8a, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x74, 0x66,
	0x38, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x74, 0x66, 0x38, 0x22, 0x99, 0x01,
	0x0a, 0x13, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x10, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x43, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x6b, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x66,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x61,
	0x64, 0x22, 0x70, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0xcc, 0x02, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x64, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x64, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0b,
	0x64, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x21, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x22, 0x6f, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x66, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x66, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x32, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x12, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0a,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x12, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x41, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x61, 0x70, 0x65, 0x74, 0x61, 0x6e, 0x2d, 0x69, 0x6f, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_queue_proto_rawDescOnce sync.Once
	file_proto_queue_proto_rawDescData = file_proto_queue_proto_rawDesc
)

func file_proto_queue_proto_rawDescGZIP() []byte {
	file_proto_queue_proto_rawDescOnce.Do(func() {
		file_proto_queue_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_queue_proto_rawDescData)
	})
	return file_proto_queue_proto_rawDescData
}

var file_proto_queue_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_queue_proto_goTypes = []interface{}{
	(*QueueProduceRequest)(nil),   // 0: querator.QueueProduceRequest
	(*QueueProduceItem)(nil),      // 1: querator.QueueProduceItem
	(*QueueReserveRequest)(nil),   // 2: querator.QueueReserveRequest
	(*QueueReserveItem)(nil),      // 3: querator.QueueReserveItem
	(*QueueReserveResponse)(nil),  // 4: querator.QueueReserveResponse
	(*QueueDeferRequest)(nil),     // 5: querator.QueueDeferRequest
	(*QueueDeferItem)(nil),        // 6: querator.QueueDeferItem
	(*QueueCompleteRequest)(nil),  // 7: querator.QueueCompleteRequest
	(*QueueInfo)(nil),             // 8: querator.QueueInfo
	(*QueuePauseRequest)(nil),     // 9: querator.QueuePauseRequest
	(*QueueClearRequest)(nil),     // 10: querator.QueueClearRequest
	(*QueueStatsRequest)(nil),     // 11: querator.QueueStatsRequest
	(*QueueStatsResponse)(nil),    // 12: querator.QueueStatsResponse
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
}
var file_proto_queue_proto_depIdxs = []int32{
	1,  // 0: querator.QueueProduceRequest.items:type_name -> querator.QueueProduceItem
	13, // 1: querator.QueueReserveItem.reserveDeadline:type_name -> google.protobuf.Timestamp
	3,  // 2: querator.QueueReserveResponse.items:type_name -> querator.QueueReserveItem
	6,  // 3: querator.QueueDeferRequest.items:type_name -> querator.QueueDeferItem
	13, // 4: querator.QueueDeferItem.offerAt:type_name -> google.protobuf.Timestamp
	13, // 5: querator.QueueInfo.createdAt:type_name -> google.protobuf.Timestamp
	13, // 6: querator.QueueInfo.updatedAt:type_name -> google.protobuf.Timestamp
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_queue_proto_init() }
func file_proto_queue_proto_init() {
	if File_proto_queue_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_queue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueProduceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueProduceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueReserveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueReserveItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueReserveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueDeferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueDeferItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuePauseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueClearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_queue_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_queue_proto_goTypes,
		DependencyIndexes: file_proto_queue_proto_depIdxs,
		MessageInfos:      file_proto_queue_proto_msgTypes,
	}.Build()
	File_proto_queue_proto = out.File
	file_proto_queue_proto_rawDesc = nil
	file_proto_queue_proto_goTypes = nil
	file_proto_queue_proto_depIdxs = nil
}
