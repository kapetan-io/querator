//
//Copyright 2024 Derrick J Wippler
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: proto/queue.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueueProduceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue this item is to be queued to.
	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	// How long the client should wait until the items in this produce request are accepted into the queue.
	// If this duration elapses and the server hasn't responded the client should assume the item was not
	// produced. If the server detects a client has been waiting for to long, it will cancel the produce
	// request and return an error to the client.
	//
	// Example: '1m', '20s'. Default timeout is '1m' and the maximum timeout is 15 minutes.
	RequestTimeout string `protobuf:"bytes,2,opt,name=requestTimeout,json=request_timeout,proto3" json:"requestTimeout,omitempty"`
	// A list of items to be queued
	Items []*QueueProduceItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *QueueProduceRequest) Reset() {
	*x = QueueProduceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueProduceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueProduceRequest) ProtoMessage() {}

func (x *QueueProduceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueProduceRequest.ProtoReflect.Descriptor instead.
func (*QueueProduceRequest) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{0}
}

func (x *QueueProduceRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueProduceRequest) GetRequestTimeout() string {
	if x != nil {
		return x.RequestTimeout
	}
	return ""
}

func (x *QueueProduceRequest) GetItems() []*QueueProduceItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueueProduceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A user specified field which indicates the encoding used to encode the 'payload'
	Encoding string `protobuf:"bytes,1,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// A Kind or Type the payload contains. Consumers can use this field to determine handling
	// of the payload prior to unmarshalling. Examples: 'webhook-v2', 'webhook-v1',
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// This is a user specified field that can be used by the consumer to determine handling
	// of the message without needing to unmarshall the payload.
	// Examples: 'account-0001', 'john.smith'
	Reference string `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"` // TODO: This should be removed in favor of a workflow id.
	// Indicates the item is to be enqueued at a future timestamp specified.
	EnqueueAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=enqueueAt,json=enqueue_at,proto3" json:"enqueueAt,omitempty"`
	// The payload of the item as an array of raw bytes with no predetermined character set.
	// Clients who communicate with Querator with `Content-Type: application/protobuf`
	// (which is the default for golang clients) should use this field instead of `strings`.
	//
	// NOTE: If `Content-Type: application/json` is used when communicating with Querator, the
	// 'bytes' field will be encoded as base64. This is because byte fields (unlike string fields)
	// can contain non-UTF8 binary data, and since that cannot be directly represented in JSON, we
	// have to base64 encode it.
	Bytes []byte `protobuf:"bytes,5,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// This is an a convenience field useful for clients that are communicating with Querator via
	// `Content-Type: application/json`. This field assumes a utf8 encoded payload and does not
	// require the payload to be encoded as base64. As such is is an excellent choice for clients
	// who do not have access to a base64 encoder and can't use the `bytes` field for their payload.
	//
	// NOTE: Both `bytes` and `utf8` can be set, but `bytes` takes precedence. If `bytes` is set,
	// then that will be used as the payload. If `utf8` is set and `bytes` is empty, then `utf8`
	// will be used. If both `bytes` and `utf8` are set, then `bytes` will be used and `utf8` will
	// be ignored.
	// Example: 'Hello, I am a UTF-8 payload' , '{"key", "value"}'
	Utf8 string `protobuf:"bytes,6,opt,name=utf8,proto3" json:"utf8,omitempty"`
}

func (x *QueueProduceItem) Reset() {
	*x = QueueProduceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueProduceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueProduceItem) ProtoMessage() {}

func (x *QueueProduceItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueProduceItem.ProtoReflect.Descriptor instead.
func (*QueueProduceItem) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{1}
}

func (x *QueueProduceItem) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *QueueProduceItem) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *QueueProduceItem) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *QueueProduceItem) GetEnqueueAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EnqueueAt
	}
	return nil
}

func (x *QueueProduceItem) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *QueueProduceItem) GetUtf8() string {
	if x != nil {
		return x.Utf8
	}
	return ""
}

type QueueLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue to lease work from
	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	// The number of queue items requested from the queue.
	BatchSize int32 `protobuf:"varint,2,opt,name=batchSize,json=batch_size,proto3" json:"batchSize,omitempty"`
	// A user supplied unique string which identifies the client making this request. This
	// must be unique for each client reserving items. Multiple clients with the same
	// id cannot lease from the same queue. If you need more throughput, increase the batch
	// size instead.
	ClientId string `protobuf:"bytes,3,opt,name=clientId,json=client_id,proto3" json:"clientId,omitempty"`
	// The duration the client expects to wait for a queue item to be leased before timing out.
	// Maximum timeout duration is 15 minutes
	// Example: '5m', '10s'
	RequestTimeout string `protobuf:"bytes,4,opt,name=requestTimeout,json=request_timeout,proto3" json:"requestTimeout,omitempty"`
}

func (x *QueueLeaseRequest) Reset() {
	*x = QueueLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueLeaseRequest) ProtoMessage() {}

func (x *QueueLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueLeaseRequest.ProtoReflect.Descriptor instead.
func (*QueueLeaseRequest) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{2}
}

func (x *QueueLeaseRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueLeaseRequest) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *QueueLeaseRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *QueueLeaseRequest) GetRequestTimeout() string {
	if x != nil {
		return x.RequestTimeout
	}
	return ""
}

type QueueLeaseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A user specified field which indicates the encoding the user used to encode the 'payload'
	Encoding string `protobuf:"bytes,1,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// A Kind or Type the payload contains. Consumers can use this field to determine handling
	// of the payload prior to unmarshalling. Examples: 'webhook-v2', 'webhook-v1',
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// This is a user specified field that can be used by the consumer to determine handling
	// of the queue item without needing to unmarshall the payload.
	// Examples: 'account-0001', 'john.smith', 'id-hIGTUYm2'
	Reference string `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
	// A unique id which identifies an item in a queue
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// The number of times this item has been retried or leased and timed out during
	// processing by a consumer.
	Attempts int32 `protobuf:"varint,5,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// The date time that Querator will offer up this item to another consumer
	// If the consumer reserving this item has not marked it complete.
	//
	// The consumer can use this date to decide if it should finalize it's work
	// if the timeout date has expired.
	LeaseDeadline *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=leaseDeadline,json=lease_deadline,proto3" json:"leaseDeadline,omitempty"`
	// The payload of the item as an array of raw bytes with no predetermined character set.
	//
	// NOTE: If `Content-Type: application/json` is used when communicating with Querator, the
	// 'bytes' field will be encoded as base64. This is because byte fields (unlike string fields)
	// can contain non-UTF8 binary data, and since that cannot be directly represented in JSON, we
	// have to base64 encode it.
	Bytes []byte `protobuf:"bytes,7,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *QueueLeaseItem) Reset() {
	*x = QueueLeaseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueLeaseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueLeaseItem) ProtoMessage() {}

func (x *QueueLeaseItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueLeaseItem.ProtoReflect.Descriptor instead.
func (*QueueLeaseItem) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{3}
}

func (x *QueueLeaseItem) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *QueueLeaseItem) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *QueueLeaseItem) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *QueueLeaseItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueueLeaseItem) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *QueueLeaseItem) GetLeaseDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.LeaseDeadline
	}
	return nil
}

func (x *QueueLeaseItem) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type QueueLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue the lease items are from
	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	// Partition the leased items are from
	Partition int32 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	// Items leased
	Items []*QueueLeaseItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *QueueLeaseResponse) Reset() {
	*x = QueueLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueLeaseResponse) ProtoMessage() {}

func (x *QueueLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueLeaseResponse.ProtoReflect.Descriptor instead.
func (*QueueLeaseResponse) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{4}
}

func (x *QueueLeaseResponse) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueLeaseResponse) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *QueueLeaseResponse) GetItems() []*QueueLeaseItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueueRetryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue the leased items are from
	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	// Partition the leased items are from
	Partition int32             `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	Items     []*QueueRetryItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *QueueRetryRequest) Reset() {
	*x = QueueRetryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueRetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueRetryRequest) ProtoMessage() {}

func (x *QueueRetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueRetryRequest.ProtoReflect.Descriptor instead.
func (*QueueRetryRequest) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{5}
}

func (x *QueueRetryRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueRetryRequest) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *QueueRetryRequest) GetItems() []*QueueRetryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueueRetryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique id which identifies a unique item in a queue.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The timestamp after which the item will be added to the queue specified.
	// The date can be empty, the current time or a past date/time, in which
	// case the item will be immediately added to the queue.
	RetryAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=retryAt,json=retry_at,proto3" json:"retryAt,omitempty"`
	// Indicates the item is dead, will not be retried regardless of the number of attempts
	// remaining. If set to true the retry will place the item in the dead letter queue for
	// the specified queue.
	Dead bool `protobuf:"varint,3,opt,name=dead,proto3" json:"dead,omitempty"`
}

func (x *QueueRetryItem) Reset() {
	*x = QueueRetryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueRetryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueRetryItem) ProtoMessage() {}

func (x *QueueRetryItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueRetryItem.ProtoReflect.Descriptor instead.
func (*QueueRetryItem) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{6}
}

func (x *QueueRetryItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueueRetryItem) GetRetryAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RetryAt
	}
	return nil
}

func (x *QueueRetryItem) GetDead() bool {
	if x != nil {
		return x.Dead
	}
	return false
}

type QueueCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue these ids are from
	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	// The Partition these ids are associated with
	Partition int32 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	// The duration the client expects to wait for a queue item to be leased before timing out.
	// Maximum timeout duration is 15 minutes
	// Example: '5m', '10s'
	RequestTimeout string `protobuf:"bytes,3,opt,name=requestTimeout,json=request_timeout,proto3" json:"requestTimeout,omitempty"`
	// A list of ids to mark complete
	Ids []string `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *QueueCompleteRequest) Reset() {
	*x = QueueCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueCompleteRequest) ProtoMessage() {}

func (x *QueueCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueCompleteRequest.ProtoReflect.Descriptor instead.
func (*QueueCompleteRequest) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{7}
}

func (x *QueueCompleteRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueCompleteRequest) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *QueueCompleteRequest) GetRequestTimeout() string {
	if x != nil {
		return x.RequestTimeout
	}
	return ""
}

func (x *QueueCompleteRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type QueueProduceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	CodeText string `protobuf:"bytes,2,opt,name=codeText,json=code_text,proto3" json:"codeText,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QueueProduceResponse) Reset() {
	*x = QueueProduceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueProduceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueProduceResponse) ProtoMessage() {}

func (x *QueueProduceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueProduceResponse.ProtoReflect.Descriptor instead.
func (*QueueProduceResponse) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{8}
}

func (x *QueueProduceResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueueProduceResponse) GetCodeText() string {
	if x != nil {
		return x.CodeText
	}
	return ""
}

func (x *QueueProduceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QueueCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	CodeText string `protobuf:"bytes,2,opt,name=codeText,json=code_text,proto3" json:"codeText,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QueueCompleteResponse) Reset() {
	*x = QueueCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueCompleteResponse) ProtoMessage() {}

func (x *QueueCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueCompleteResponse.ProtoReflect.Descriptor instead.
func (*QueueCompleteResponse) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{9}
}

func (x *QueueCompleteResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueueCompleteResponse) GetCodeText() string {
	if x != nil {
		return x.CodeText
	}
	return ""
}

func (x *QueueCompleteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QueueRetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	CodeText string `protobuf:"bytes,2,opt,name=codeText,json=code_text,proto3" json:"codeText,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QueueRetryResponse) Reset() {
	*x = QueueRetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueRetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueRetryResponse) ProtoMessage() {}

func (x *QueueRetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueRetryResponse.ProtoReflect.Descriptor instead.
func (*QueueRetryResponse) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{10}
}

func (x *QueueRetryResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueueRetryResponse) GetCodeText() string {
	if x != nil {
		return x.CodeText
	}
	return ""
}

func (x *QueueRetryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QueueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue
	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	// The date the queue was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,json=created_at,proto3" json:"createdAt,omitempty"`
	// The date the queue was last updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,json=updated_at,proto3" json:"updatedAt,omitempty"`
	// The name of the dead letter queue for this queue. If this is a dead letter queue then
	// this field will be empty when retrieved via '/queue.list'
	DeadQueue string `protobuf:"bytes,4,opt,name=deadQueue,json=dead_queue,proto3" json:"deadQueue,omitempty"`
	// This is a user supplied field which could contain metadata or specify who owns this queue
	// Examples: "jake@statefarm.com", "stapler@office-space.com", "account-0001"
	Reference string `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`
	// The lease timeout for this queue.
	// Example: '60m', '24h', '10s'
	LeaseTimeout string `protobuf:"bytes,6,opt,name=leaseTimeout,json=lease_timeout,proto3" json:"leaseTimeout,omitempty"`
	// How long the item can wait in the queue regardless of attempts before it is moved
	// to the dead letter queue. Example: '24h', '60m', '10s'
	ExpireTimeout string `protobuf:"bytes,7,opt,name=expireTimeout,json=expire_timeout,proto3" json:"expireTimeout,omitempty"`
	// The maximum number of times this item can be retried by a consumer before it is
	// placed in the dead letter queue or removed. Infinite attempts if max_attempts is set to '0'
	// `lease_timeout` violations are included as attempts
	MaxAttempts int32 `protobuf:"varint,8,opt,name=maxAttempts,json=max_attempts,proto3" json:"maxAttempts,omitempty"`
	// The number of partitions the queue is requesting. This might be different than the
	// actual partitions if the requested partition count was recently changed via rebalance request.
	RequestedPartitions int32            `protobuf:"varint,9,opt,name=requestedPartitions,json=requested_partitions,proto3" json:"requestedPartitions,omitempty"`
	Partitions          []*PartitionInfo `protobuf:"bytes,10,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *QueueInfo) Reset() {
	*x = QueueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueInfo) ProtoMessage() {}

func (x *QueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueInfo.ProtoReflect.Descriptor instead.
func (*QueueInfo) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{11}
}

func (x *QueueInfo) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *QueueInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *QueueInfo) GetDeadQueue() string {
	if x != nil {
		return x.DeadQueue
	}
	return ""
}

func (x *QueueInfo) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *QueueInfo) GetLeaseTimeout() string {
	if x != nil {
		return x.LeaseTimeout
	}
	return ""
}

func (x *QueueInfo) GetExpireTimeout() string {
	if x != nil {
		return x.ExpireTimeout
	}
	return ""
}

func (x *QueueInfo) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *QueueInfo) GetRequestedPartitions() int32 {
	if x != nil {
		return x.RequestedPartitions
	}
	return 0
}

func (x *QueueInfo) GetPartitions() []*PartitionInfo {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type PartitionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Information on the partitions availability, migration or rebalance status.
	Partition int32 `protobuf:"varint,1,opt,name=partition,proto3" json:"partition,omitempty"`
}

func (x *PartitionInfo) Reset() {
	*x = PartitionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionInfo) ProtoMessage() {}

func (x *PartitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionInfo.ProtoReflect.Descriptor instead.
func (*PartitionInfo) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{12}
}

func (x *PartitionInfo) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

type QueueClearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue
	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	// retry indicates the 'retry' queue will be cleared. If true, any items
	// scheduled to be retried at a future date will be removed.
	Retry bool `protobuf:"varint,2,opt,name=retry,proto3" json:"retry,omitempty"` // TODO: Implement
	// Scheduled indicates any 'scheduled' items in the queue will be
	// cleared. If true, any items scheduled to be enqueued at a future date
	// will be removed.
	Scheduled bool `protobuf:"varint,3,opt,name=scheduled,proto3" json:"scheduled,omitempty"` // TODO: Implement
	// Queue indicates any items currently waiting in the FIFO queue will
	// clear. If true, any items in the queue which have NOT been leased
	// will be removed.
	Queue bool `protobuf:"varint,4,opt,name=queue,proto3" json:"queue,omitempty"`
	// Destructive indicates the Retry, Scheduled, Queue operations should be
	// destructive in that all data regardless of status will be removed.
	// For example, if used with ClearRequest.Queue = true, then ALL items
	// in the queue regardless of lease status will be removed. This means
	// that clients who currently have ownership of those items will not be able
	// to "complete" those items, as querator will have no knowledge of those items.
	Destructive bool `protobuf:"varint,5,opt,name=destructive,proto3" json:"destructive,omitempty"`
}

func (x *QueueClearRequest) Reset() {
	*x = QueueClearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueClearRequest) ProtoMessage() {}

func (x *QueueClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueClearRequest.ProtoReflect.Descriptor instead.
func (*QueueClearRequest) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{13}
}

func (x *QueueClearRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueClearRequest) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

func (x *QueueClearRequest) GetScheduled() bool {
	if x != nil {
		return x.Scheduled
	}
	return false
}

func (x *QueueClearRequest) GetQueue() bool {
	if x != nil {
		return x.Queue
	}
	return false
}

func (x *QueueClearRequest) GetDestructive() bool {
	if x != nil {
		return x.Destructive
	}
	return false
}

type QueueStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueName string `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
}

func (x *QueueStatsRequest) Reset() {
	*x = QueueStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueStatsRequest) ProtoMessage() {}

func (x *QueueStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueStatsRequest.ProtoReflect.Descriptor instead.
func (*QueueStatsRequest) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{14}
}

func (x *QueueStatsRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

type QueueStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueName     string               `protobuf:"bytes,1,opt,name=queueName,json=queue_name,proto3" json:"queueName,omitempty"`
	LogicalQueues []*QueueLogicalStats `protobuf:"bytes,2,rep,name=logicalQueues,proto3" json:"logicalQueues,omitempty"`
}

func (x *QueueStatsResponse) Reset() {
	*x = QueueStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueStatsResponse) ProtoMessage() {}

func (x *QueueStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueStatsResponse.ProtoReflect.Descriptor instead.
func (*QueueStatsResponse) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{15}
}

func (x *QueueStatsResponse) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueStatsResponse) GetLogicalQueues() []*QueueLogicalStats {
	if x != nil {
		return x.LogicalQueues
	}
	return nil
}

type QueuePartitionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partition int32 `protobuf:"varint,1,opt,name=partition,proto3" json:"partition,omitempty"`
	// Total is the number of items in the partition
	Total int32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// TotalLeased is the number of items in the partition that are in leased state
	TotalLeased int32 `protobuf:"varint,3,opt,name=totalLeased,json=total_leased,proto3" json:"totalLeased,omitempty"`
	// Failures is the total number of failures the partitions has encountered, which is
	// Reset when the partition becomes available. -1 means the partition isn't ready
	Failures int32 `protobuf:"varint,4,opt,name=failures,proto3" json:"failures,omitempty"`
	// AverageAge is the average age of all items in the partition
	AverageAge string `protobuf:"bytes,5,opt,name=averageAge,json=average_age,proto3" json:"averageAge,omitempty"`
	// AverageLeasedAge is the average age of leased items in the partition
	AverageLeasedAge string `protobuf:"bytes,6,opt,name=averageLeasedAge,json=average_leased_age,proto3" json:"averageLeasedAge,omitempty"`
}

func (x *QueuePartitionStats) Reset() {
	*x = QueuePartitionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuePartitionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePartitionStats) ProtoMessage() {}

func (x *QueuePartitionStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePartitionStats.ProtoReflect.Descriptor instead.
func (*QueuePartitionStats) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{16}
}

func (x *QueuePartitionStats) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *QueuePartitionStats) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueuePartitionStats) GetTotalLeased() int32 {
	if x != nil {
		return x.TotalLeased
	}
	return 0
}

func (x *QueuePartitionStats) GetFailures() int32 {
	if x != nil {
		return x.Failures
	}
	return 0
}

func (x *QueuePartitionStats) GetAverageAge() string {
	if x != nil {
		return x.AverageAge
	}
	return ""
}

func (x *QueuePartitionStats) GetAverageLeasedAge() string {
	if x != nil {
		return x.AverageLeasedAge
	}
	return ""
}

type QueueLogicalStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProduceWaiting is the number of `/queue.produce` requests currently waiting
	// to be processed
	ProduceWaiting int32 `protobuf:"varint,6,opt,name=produceWaiting,json=produce_waiting,proto3" json:"produceWaiting,omitempty"`
	// LeaseWaiting is the number of `/queue.lease` requests currently waiting
	// to for items from the queue
	LeaseWaiting int32 `protobuf:"varint,7,opt,name=leaseWaiting,json=lease_waiting,proto3" json:"leaseWaiting,omitempty"`
	// CompleteWaiting is the number of `/queue.complete` requests currently waiting
	// to be processed
	CompleteWaiting int32 `protobuf:"varint,8,opt,name=completeWaiting,json=complete_waiting,proto3" json:"completeWaiting,omitempty"`
	// InFlight is the total number of requests currently in flight waiting for responses from the sync loop
	InFlight int32 `protobuf:"varint,10,opt,name=inFlight,json=in_flight,proto3" json:"inFlight,omitempty"`
	// Stats for each partition in the logical queue
	Partitions []*QueuePartitionStats `protobuf:"bytes,11,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *QueueLogicalStats) Reset() {
	*x = QueueLogicalStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_queue_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueLogicalStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueLogicalStats) ProtoMessage() {}

func (x *QueueLogicalStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_queue_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueLogicalStats.ProtoReflect.Descriptor instead.
func (*QueueLogicalStats) Descriptor() ([]byte, []int) {
	return file_proto_queue_proto_rawDescGZIP(), []int{17}
}

func (x *QueueLogicalStats) GetProduceWaiting() int32 {
	if x != nil {
		return x.ProduceWaiting
	}
	return 0
}

func (x *QueueLogicalStats) GetLeaseWaiting() int32 {
	if x != nil {
		return x.LeaseWaiting
	}
	return 0
}

func (x *QueueLogicalStats) GetCompleteWaiting() int32 {
	if x != nil {
		return x.CompleteWaiting
	}
	return 0
}

func (x *QueueLogicalStats) GetInFlight() int32 {
	if x != nil {
		return x.InFlight
	}
	return 0
}

func (x *QueueLogicalStats) GetPartitions() []*QueuePartitionStats {
	if x != nil {
		return x.Partitions
	}
	return nil
}

var File_proto_queue_proto protoreflect.FileDescriptor

var file_proto_queue_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x71, 0x75, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f,
	0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xc5, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x41, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x74, 0x66, 0x38, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x74, 0x66, 0x38, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x80, 0x01, 0x0a,
	0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x6b, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x61, 0x64, 0x22, 0x8e, 0x01, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x61, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x63, 0x6f, 0x64,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x62, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb8, 0x03, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x39, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x64,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61,
	0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x21, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x2d, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x9e, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x22, 0x32, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x22, 0xd7, 0x01, 0x0a,
	0x13, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x41, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x08, 0x69, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6b, 0x61, 0x70, 0x65, 0x74, 0x61, 0x6e, 0x2d, 0x69, 0x6f, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_queue_proto_rawDescOnce sync.Once
	file_proto_queue_proto_rawDescData = file_proto_queue_proto_rawDesc
)

func file_proto_queue_proto_rawDescGZIP() []byte {
	file_proto_queue_proto_rawDescOnce.Do(func() {
		file_proto_queue_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_queue_proto_rawDescData)
	})
	return file_proto_queue_proto_rawDescData
}

var file_proto_queue_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_queue_proto_goTypes = []interface{}{
	(*QueueProduceRequest)(nil),   // 0: querator.QueueProduceRequest
	(*QueueProduceItem)(nil),      // 1: querator.QueueProduceItem
	(*QueueLeaseRequest)(nil),     // 2: querator.QueueLeaseRequest
	(*QueueLeaseItem)(nil),        // 3: querator.QueueLeaseItem
	(*QueueLeaseResponse)(nil),    // 4: querator.QueueLeaseResponse
	(*QueueRetryRequest)(nil),     // 5: querator.QueueRetryRequest
	(*QueueRetryItem)(nil),        // 6: querator.QueueRetryItem
	(*QueueCompleteRequest)(nil),  // 7: querator.QueueCompleteRequest
	(*QueueProduceResponse)(nil),  // 8: querator.QueueProduceResponse
	(*QueueCompleteResponse)(nil), // 9: querator.QueueCompleteResponse
	(*QueueRetryResponse)(nil),    // 10: querator.QueueRetryResponse
	(*QueueInfo)(nil),             // 11: querator.QueueInfo
	(*PartitionInfo)(nil),         // 12: querator.PartitionInfo
	(*QueueClearRequest)(nil),     // 13: querator.QueueClearRequest
	(*QueueStatsRequest)(nil),     // 14: querator.QueueStatsRequest
	(*QueueStatsResponse)(nil),    // 15: querator.QueueStatsResponse
	(*QueuePartitionStats)(nil),   // 16: querator.QueuePartitionStats
	(*QueueLogicalStats)(nil),     // 17: querator.QueueLogicalStats
	(*timestamppb.Timestamp)(nil), // 18: google.protobuf.Timestamp
}
var file_proto_queue_proto_depIdxs = []int32{
	1,  // 0: querator.QueueProduceRequest.items:type_name -> querator.QueueProduceItem
	18, // 1: querator.QueueProduceItem.enqueueAt:type_name -> google.protobuf.Timestamp
	18, // 2: querator.QueueLeaseItem.leaseDeadline:type_name -> google.protobuf.Timestamp
	3,  // 3: querator.QueueLeaseResponse.items:type_name -> querator.QueueLeaseItem
	6,  // 4: querator.QueueRetryRequest.items:type_name -> querator.QueueRetryItem
	18, // 5: querator.QueueRetryItem.retryAt:type_name -> google.protobuf.Timestamp
	18, // 6: querator.QueueInfo.createdAt:type_name -> google.protobuf.Timestamp
	18, // 7: querator.QueueInfo.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 8: querator.QueueInfo.partitions:type_name -> querator.PartitionInfo
	17, // 9: querator.QueueStatsResponse.logicalQueues:type_name -> querator.QueueLogicalStats
	16, // 10: querator.QueueLogicalStats.partitions:type_name -> querator.QueuePartitionStats
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_proto_queue_proto_init() }
func file_proto_queue_proto_init() {
	if File_proto_queue_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_queue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueProduceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueProduceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueLeaseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueRetryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueRetryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueProduceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueRetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueClearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuePartitionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_queue_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueLogicalStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_queue_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_queue_proto_goTypes,
		DependencyIndexes: file_proto_queue_proto_depIdxs,
		MessageInfos:      file_proto_queue_proto_msgTypes,
	}.Build()
	File_proto_queue_proto = out.File
	file_proto_queue_proto_rawDesc = nil
	file_proto_queue_proto_goTypes = nil
	file_proto_queue_proto_depIdxs = nil
}
